set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" Vim status line theme
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'

Plugin 'jiangmiao/auto-pairs'
Plugin 'preservim/nerdcommenter'

Plugin 'junegunn/fzf'
Plugin 'junegunn/fzf.vim'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required


" air-line
let g:airline_powerline_fonts = 1

let g:airline_theme='deus'
let g:airline#extensions#tabline#enabled = 1

if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif

" unicode symbols
let g:airline_left_sep = '»'
let g:airline_left_sep = '▶'
let g:airline_right_sep = '«'
let g:airline_right_sep = '◀'
let g:airline_symbols.linenr = '␊'
let g:airline_symbols.linenr = '␤'
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.branch = '⎇'
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.paste = 'Þ'
let g:airline_symbols.paste = '∥'
let g:airline_symbols.whitespace = 'Ξ'

" airline symbols
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = ''

set number relativenumber
set nu rnu

set tabstop=4
set shiftwidth=4
set expandtab
set smartindent

set viminfo+=n~/.vim/viminfo

syntax on
hi VertSplit cterm=none
hi clear SignColumn
highlight Pmenu ctermbg=001
hi clear SignColumn

"--------
" Mapping
"--------

" Open .vimrc
nnoremap <leader>ev :vsplit $MYVIMRC<cr>

" Source .vimrc
nnoremap <leader>sv :source $MYVIMRC<cr>


" Switching panes
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

inoremap jk <esc>
nnoremap <leader>w <esc>:w<cr>

" Delete line without putting into "1 register
nnoremap \d "_dd

" Paste the last yanked
nnoremap \p "0p

" Quote
nnoremap <leader>" viw<esc>a"<esc>bi"<esc>lel
nnoremap <leader>' viw<esc>a'<esc>bi'<esc>lel
nnoremap <leader>( viw<esc>a)<esc>bi(<esc>lel
nnoremap <leader>{ viw<esc>a}<esc>bi{<esc>lel
nnoremap <leader>[ viw<esc>a]<esc>bi[<esc>lel

vnoremap <leader>" <esc>`>a"<esc>`<i"<esc>`>2l
vnoremap <leader>' <esc>`>a'<esc>`<i'<esc>`>2l
vnoremap <leader>( <esc>`>a)<esc>`<i(<esc>`>2l
vnoremap <leader>{ <esc>`>a}<esc>`<i{<esc>`>2l
vnoremap <leader>[ <esc>`>a]<esc>`<i[<esc>`>2l

" fzf
"nnoremap <C-p> :call fzf#run({'sink': 'e', 'options': '--preview="bat --style=numbers,changes --color always {}" --preview-window=left:70%'})<CR>
nnoremap <leader>f :BLines<CR>
nnoremap <leader>r :Rg<CR>
nnoremap <C-p> :Files<CR>

" Initialize configuration dictionary
" let g:fzf_vim = {}
"let g:fzf_vim.preview_window = ['right,50%', 'ctrl-/']
" let g:fzf_vim.preview_window = ['hidden,right,50%,<70(up,40%)', 'ctrl-/']
let g:fzf_layout = {'up':'~90%', 'window':
\{
\	'width': 0.8,
\	'height': 0.8,
\	'xoffset': 0.5,
\	'yoffset': 0.5,
\	'border': 'sharp'
\}}

let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }
